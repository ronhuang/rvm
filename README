
                Ron's x86 Virtual Machine (lite)
           ==========================================

Content
---------

 1. Introduction
 2. Directory Contents
 3. How to Build, Test, and Run
 4. License
 5. Reporting Bugs
 6. Known Issues


1. INTRODUCTION
-----------------

This tree contains sources, tests, and samples for Ron's x86 Virtual
Machine (lite) package, or `rvm'. `rvm' reads a text file with x86
machine code. It will disassemble and execute the instructions within
the file. Registers and flags of the CPU are also dumped for every
step.

`rvm' uses the interpreter technique to execute the x86
instructions. Due to the nature of variable-length instruction in x86
architecture, the interpreter does not have distinct separation of the
three instruction execution phases, fetch, decode, and
dispatch. Instead, parts of the instruction are fetched and decoded
first. Then depending on the partial decoded instruction, more parts
might need to be fetched.

Besides executing instructions, `rvm' also emulates the general
registers, flags, stack, and memory. The memory is implemented via a
hash table and supports full 32-bit range address.

Sample code files that `rvm' takes are as follow:

  # Sample I:
  50 c1 f8 02 34 2e 89 e5

  # Sample II:
  50                       # push eax
  c1 f8 02                 # sar eax,0x02
  34 2e                    # xor al,0x2e
  89 e5                    # mov ebp,esp

The code can be all on a single line or on multiple lines. The pound
sign (#) indicates that the rest of the characters on the same line
are comments. More samples are located in the `sample' folder (see
below for list of directory and files.)

Test-driven development was used when developing `rvm'. Unit test
cases are written prior the implementation. If you encounter bugs when
executing `rvm', please try running the test cases first (see below on
how to run tests.)

`rvm' is part of the programming assignment 1 for CS6270 â€“ Virtual
Machines.


2. DIRECTORY CONTENTS
-----------------------
README          This file.
Makefile        Makefile to build `rvm' and its test cases.

type.h          Define common data types used in `rvm'.
mem.[hc]        Memory emulation.
cpu.[hc]        CPU states, such as registers, flags, stack.
code.[hc]       Code reader, reads code from file or buffer.
micro_table.h   Opcode map table roughly equivalent to
                "Table A-2. One-byte Opcode Map" in the Intel manual.
cycle.[hc]      Main implementation of the interpreter.
rvm.c           Front-end for the `rvm'.

test_*.c        Unit test cases for the above components.
sample/         Sample machine code file used for testing.

fct.h           FCTX - Fast C Unit Testing in a Header.
hashtable.[hc]  C Hash Table by Christopher Clark.


3. HOW TO BUILD, TEST, RUN
----------------------------



4. LICENSE
------------



5. REPORTING BUGS
-------------------



6. KNOWN ISSUES
-----------------

 * Only support IA-32 architecture. 64-bit instructions are not
   supported.

 * Only support flat memory model. Segment registers are not used.


